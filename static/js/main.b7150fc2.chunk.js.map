{"version":3,"sources":["AppEngine.js","App.js","reportWebVitals.js","index.js"],"names":["AppEngine","yscale","xscale","useState","setData","baseTemp","setBaseTemp","monthlyV","setMonthlyV","width","height","padding","minYear","d3","d","maxYear","months","useEffect","a","fetch","res","json","resJson","fetchData","domain","range","Date","tooltip","selectAll","data","enter","append","attr","style","on","console","log","transition","html","toFixed","xAxis","tickFormat","yAxis","call","display","alignItems","justifyContent","id","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7150fc2.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport \"./AppEngine.css\";\n\nconst AppEngine = () => {\n  const [data, setData] = useState([]);\n  const [baseTemp, setBaseTemp] = useState([]);\n  const [monthlyV, setMonthlyV] = useState([]);\n  const width = 1200;\n  const height = 480;\n  const padding = 35;\n  const minYear = d3.min(monthlyV, (d) => d[\"year\"]);\n  const maxYear = d3.max(monthlyV, (d) => d[\"year\"]);\n  const months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n\n  let yscale;\n  let xscale;\n\n  useEffect(() => {\n    async function fetchData() {\n      const res = await fetch(\n        \"https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/global-temperature.json\"\n      );\n      const resJson = await res.json();\n      setData(resJson);\n      setBaseTemp(resJson[\"baseTemperature\"]);\n      setMonthlyV(resJson[\"monthlyVariance\"]);\n    }\n    fetchData();\n  }, []);\n\n  xscale = d3\n    .scaleLinear()\n    .domain([\n      d3.min(monthlyV, (d) => d[\"year\"]),\n      d3.max(monthlyV, (d) => d[\"year\"] + 1),\n    ])\n    .range([padding, width - padding]);\n\n  yscale = d3\n    .scaleTime()\n    .domain([new Date(0, 0, 0, 0, 0, 0, 0), new Date(0, 12, 0, 0, 0, 0, 0)])\n    .range([padding, height - padding]);\n\n  let tooltip = d3.select(\"#tooltip\");\n\n  d3.select(\"svg\")\n    .selectAll(\"rect\")\n    .data(monthlyV)\n    .enter()\n    .append(\"rect\")\n    .attr(\"class\", \"popo\")\n    .style(\"fill\", (d) => {\n      if (d[\"variance\"] <= -4.7) {\n        return \"#0984e3\";\n      } else if (d[\"variance\"] <= -3.6) {\n        return \"#74b9ff\";\n      } else if (d[\"variance\"] <= -2.5) {\n        return \"#0abde3\";\n      } else if (d[\"variance\"] <= -1.4) {\n        return \"#48dbfb\";\n      } else if (d[\"variance\"] <= -0.3) {\n        return \"#ffeaa7\";\n      } else if (d[\"variance\"] <= 0.9) {\n        return \"#fdcb6e\";\n      } else if (d[\"variance\"] <= 2) {\n        return \"#ff7675\";\n      } else if (d[\"variance\"] <= 3.1) {\n        return \"#ff7979\";\n      } else if (d[\"variance\"] <= 4.2) {\n        return \"#eb4d4b\";\n      } else if (d[\"variance\"] > 4.2) {\n        return \"#eb4d4b\";\n      }\n    })\n    .attr(\"height\", (height - padding * 2) / 12)\n    .attr(\"y\", (d) => yscale(new Date(0, d[\"month\"] - 1, 0, 0, 0, 0, 0)))\n    .attr(\"width\", (width - padding * 2) / (maxYear - minYear))\n    .attr(\"x\", (d) => xscale(d[\"year\"]))\n    .on(\"mouseover\", (d) => {\n      console.log(d);\n      tooltip.transition().style(\"visibility\", \"visible\");\n      tooltip.html(\n        d[\"year\"] +\n          \"-\" +\n          months[d[\"month\"] - 1] +\n          \"<br/>\" +\n          (baseTemp + d[\"variance\"]).toFixed(2) +\n          \"℃\" +\n          \"<br/>\" +\n          d[\"variance\"].toFixed(2) +\n          \"℃\" +\n          \"<br/>\"\n      );\n      tooltip.style(\"left\", xscale(d[\"year\"]) - padding + \"px\");\n      tooltip.style(\n        \"top\",\n        yscale(new Date(0, d[\"month\"] - 1, 0, 0, 0, 0, 0)) + 40 + \"px\"\n      );\n    })\n    .on(\"mouseout\", (d) => {\n      tooltip.style(\"visibility\", \"hidden\");\n    });\n\n  let xAxis = d3.axisBottom(xscale).tickFormat(d3.format(\"d\"));\n\n  let yAxis = d3.axisLeft(yscale).tickFormat(d3.timeFormat(\"%B\"));\n\n  d3.select(\"svg\")\n    .append(\"g\")\n    .call(xAxis)\n    .attr(\"transform\", \"translate(0,\" + (height - padding) + \")\")\n    .style(\"color\", \"white\");\n\n  d3.select(\"svg\")\n    .append(\"g\")\n    .call(yAxis)\n    .attr(\"transform\", \"translate(\" + padding + \", 0)\")\n    .style(\"color\", \"white\")\n    .style(\"font-size\", 6);\n\n  return (\n    <div>\n      <h1>Monthly Global Land-Surface Temperature</h1>\n      <h3>1753 - 2015: base temperature {baseTemp}℃</h3>\n      <div\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        <div id=\"tooltip\">\n          <h2>chsm el america</h2>\n        </div>\n      </div>\n      <svg id=\"svg\" width={width} height={height}></svg>\n    </div>\n  );\n};\n\nexport default AppEngine;\n","import \"./App.css\";\nimport AppEngine from \"./AppEngine\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppEngine />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}